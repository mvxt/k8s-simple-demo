version: "1.0"

stages:
  - "clone"
  - "build"
  - "integration"
  - "push"
  - "deploy"

steps:
  clone:
    type: "git-clone"
    description: "Cloning main repository..."
    repo: "mvxt/k8s-simple-demo"
    revision: "${{CF_BRANCH}}"
    stage: "clone"

  build:
    title: "Building Docker Image"
    type: "build"
    image_name: "mvxt/k8s-simple-demo"
    working_directory: "${{clone}}"
    tag: "${{CF_BRANCH_TAG_NORMALIZED}}"
    dockerfile: "Dockerfile"
    stage: "build"

  approval_for_push:
    type: "pending-approval"
    title: "Should we run push"
    when:
      branch:
        only:
          - "master"
    stage: "push"

  parallel_push:
    type: "parallel"
    steps:
      annotate_build:
        title: "Annotating Build"
        image: "${{build}}"
        working_directory: "IMAGE_WORK_DIR"
        commands:
          - "echo Annotating Build..."
        on_success:
          metadata:
            set:
              - ${{build.imageId}}:
                  - CF_QUALITY: true
        on_error:
          metadata:
            set:
              - ${{build.imageId}}:
                  - CF_QUALITY: false
      push:
        title: "Pushing image to cfcr"
        type: "push"
        image_name: "mvxt/k8s-simple-demo"
        registry: "cfcr"
        candidate: "${{build}}"
        tags:
          - "${{CF_BRANCH_TAG_NORMALIZED}}"
          - "${{CF_REVISION}}"
    stage: "push"

  approval_for_deploy:
    type: "pending-approval"
    title: "Good to deploy?"
    when:
      branch:
        only:
          - "master"
    stage: "deploy"

  eks_deploy:
    title: "Deploying to EKS Cluster"
    type: "deploy"
    kind: "kubernetes"
    ## cluster name as the shown in account's integration page
    cluster: "mvxt-ccits-test-k8s-cluster" 
    # desired namespace
    namespace: "default"
    
    ## Two ways to distinguish which deployment YAML to deploy - service or file_path:    
    # The Kubernetes service that associated with the deployment using selector
    service: "kubernetes" 
    # In seconds, how long the step will wait until the rolling update is complete (default is 120)
    timeout: '150'
    # Candidate is optional, if not specified will redeploy the same image that specified in the deployment file
    # When candidate exists it should have both: image and registry
    candidate:
      # The image that will replace the original deployment image 
      # The image that been build using Build step
      image: "${{build_step}}"
      # The registry that the user's Kubernetes cluster can pull the image from
      # Codefresh will generate (if not found) secret and add it to the deployment so the Kubernetes master can pull it
      registry: "cfcr"
    # Condition to run the step
    when:
      branch:
        only:
          - "master"
    stage: "deploy"
